name: Deploy to Cloudflare

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    name: Deploy Backend Worker
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package.json
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm install
      
      - name: Build backend
        run: |
          cd backend
          npm run build
      
      - name: Deploy backend to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: backend

  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend Pages
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build frontend
        env:
          REACT_APP_BACKEND_URL: https://api.yourdomain.com
          NODE_ENV: production
        run: |
          cd frontend
          npm run build
      
      - name: Deploy frontend to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: student-results-frontend
          directory: frontend/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  setup-database:
    runs-on: ubuntu-latest
    name: Setup Database
    needs: deploy-backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Wrangler
        run: npm install -g wrangler
      
      - name: Create D1 Database
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler d1 create student-results-db || echo "Database may already exist"
      
      - name: Run database migrations
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          wrangler d1 execute student-results-db --file=database-schema.sql